name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to manually tag the release'
        required: true
        type: string

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  APP_NAME: harvesttimer-qt
  MAINTAINER: 'Jorge Barroso <jorge_barroso_11@hotmail.com>'
  DESC: 'Desktop app for Harvest, a simple time tracker and reporting tool for businesses with billing and expenses tracking.'

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install Dependencies
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        echo "Installing dependencies"
        sudo apt update
        sudo apt install zip build-essential libgl1-mesa-dev qt6-base-dev qt6-l10n-tools qt6-tools-dev qt6-tools-dev-tools libqt6svg6
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        echo "Configuring a CMake Release environment"
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr
    - name: Build
      # Build your program with the given configuration
      run: |
        echo "Building binary"
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Preparing Artifact
      run: |
        dist_dir="${{github.workspace}}/res"
        mkdir -p "${dist_dir}"
        cd "${{github.workspace}}/build"
        make DESTDIR="${dist_dir}" install
        cd "${{github.workspace}}"
        cp -r resources "${dist_dir}"
        cp -r debian "${dist_dir}"
        cp -r LICENSE "${dist_dir}"
        cp -r *.md "${dist_dir}"

    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binary-and-resources
        path: ./res
        retention-days: 1

  build-archives:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Binary and Resources
        uses: actions/download-artifact@v3
        with:
          name: binary-and-resources
      - name: Building Archives
        run: |
          echo "Creating tar and zip archives"
          assets="${{ env.APP_NAME }}_$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')"
          echo "$assets"
          mkdir -p "dist/$assets"
          cp -r usr LICENSE *.md "dist/$assets/"
          (
            cd dist
            zip -r "$assets.zip" "$assets"
            tar czf "$assets.tar.gz" "$assets"
            ls -lah *.*
          )
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: archives
          path: |
            dist/*.tar.gz
            dist/*.zip
          retention-days: 1

  prepare-package-dir:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Binary and Resources
        uses: actions/download-artifact@v3
        with:
          name: binary-and-resources
      - name: Install To Package Dir
        run: |
          echo "Adding to deb package directory"
          mkdir -p .pkg/DEBIAN
          
          find ./usr -type f -exec install -Dm755 '{}' "${{github.workspace}}/.pkg/{}" \;
          sed -i "s/\${copyright_year}/$(date '+%Y')/g" ${{github.workspace}}/.pkg/DEBIAN/copyright
      - name: Archive Package Directory
        uses: actions/upload-artifact@v3
        with:
          name: deb-rpm-dirs
          path: ./.pkg
          retention-days: 1

  build-deb-package:
    runs-on: ubuntu-latest
    needs:
      - build
      - prepare-package-dir
    steps:
      - name: Download Binary and Resources
        uses: actions/download-artifact@v3
        with:
          name: deb-rpm-dirs
      - name:
        run: |
          chmod +x ./usr/bin/harvest
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.APP_NAME }}
          package_root: .
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ inputs.version || github.ref_name }}
          arch: 'amd64'
          depends: 'qt6-base-dev, libqt6svg6'
          desc: ${{ env.DESC }}
      - uses: actions/upload-artifact@v3
        with:
          name: deb-package
          path: ./*.deb
          retention-days: 1

  build-rpm-package:
    runs-on: ubuntu-latest
    needs:
      - build
      - prepare-package-dir
    steps:
      - name: Download Binary and Resources
        uses: actions/download-artifact@v3
        with:
          name: deb-rpm-dirs
      - name: Prepare files
        run: |
          sudo rm -r DEBIAN
          chmod +x ./usr/bin/harvest
      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: ${{ env.DESC }}
          package: ${{ env.APP_NAME }}
          package_root: .
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ inputs.version || github.ref_name }}
          arch: 'x86_64'
          desc: ${{ env.DESC }}
      - uses: actions/upload-artifact@v3
        with:
          name: rpm-package
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm
          retention-days: 1

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-archives
      - build-deb-package
      - build-rpm-package
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: archives
      - uses: actions/download-artifact@v3
        with:
          name: rpm-package
      - uses: actions/download-artifact@v3
        with:
          name: deb-package
      - id: vars
        run: |
          echo "deb_name=$(ls *.deb | head -n 1)" >> $GITHUB_OUTPUT
          echo "rpm_name=$(ls *.rpm | head -n 1)" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.APP_NAME }}_linux.tar.gz
            ${{ env.APP_NAME }}_linux.zip
            ${{ steps.vars.outputs.deb_name }}
            ${{ steps.vars.outputs.rpm_name }}
          tag_name: ${{ (inputs.version || github.ref_name)  }}
          generate_release_notes: true
          draft: false
          prerelease: false

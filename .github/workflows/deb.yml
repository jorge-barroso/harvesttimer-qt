name: Create DEB

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        echo "Installing Qt6 dependencies"
        sudo apt update
        sudo apt install build-essential libgl1-mesa-dev qt6-base-dev qt6-l10n-tools qt6-tools-dev qt6-tools-dev-tools libqt6svg6

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        echo "Configuring a CMake Release environment"
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr/bin

    - name: Build
      # Build your program with the given configuration
      run: |
        echo "Building binary"
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  build-linux-packages:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install to DEB
        run: |
          echo "Adding do deb package directory"
          cd ${{github.workspace}}/build
          mkdir -p ${{github.workspace}}/build/.debpkg/usr/bin
          mkdir -p ${{github.workspace}}/build/.debpkg/DEBIAN
          make DESTDIR=".debpkg/" install || (echo "'make install' failed" ; exit 1)
          for _size in 16 24 32 48 64 96 128 256 512; do
            install -Dm644 "${{github.workspace}}/resources/icons/hicolor/${_size}x${_size}.png" "${{github.workspace}}/build/.debpkg/usr/share/icons/hicolor/${_size}x${_size}/apps/harvest.png"
          done
  
          ls -lart "${{github.workspace}}"
          install -Dm644 "${{github.workspace}}/resources/desktop/harvest.svg" "${{github.workspace}}/build/.debpkg/usr/share/icons/hicolor/scalable/apps/harvest.svg"
  
          install -Dm755 "${{github.workspace}}/resources/desktop/harvest.desktop" "${{github.workspace}}/build/.debpkg/usr/share/applications/harvest.desktop"
          
          install -Dm644 "${{github.workspace}}/debian/copyright" "${{github.workspace}}/build/.debpkg/DEBIAN/copyright";
          sed -i "s/\${copyright_year}/$(date '+%Y')/g" ${{github.workspace}}/build/.debpkg/DEBIAN/copyright
  
          ls -lart ${{github.workspace}}/build/.debpkg
      - uses: jiro4989/build-deb-action@v2
        with:
          package: harvesttimer-qt
          package_root: ${{github.workspace}}/build/.debpkg
          maintainer: Jorge Barroso <jorge_barroso_11@hotmail.com>
          version: 1.0.3
          arch: 'amd64'
          depends: 'qt6-base-dev, libqt6svg6'
          desc: 'Desktop app for Harvest, a simple time tracker and reporting tool for businesses with billing and expenses tracking.'

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-deb
          path: |
            ${{github.workspace}}/build/*.deb